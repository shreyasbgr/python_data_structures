Instructions:
HT: Set
Write the set_item method



The method should take the following parameters:

key: a string representing the key

value: a value to be stored for the given key. It can be of any data type.

The method should do the following:

Calculate the hash value for the given key.

Check if the calculated hash value is already in the hash table. If not, create a new empty list at the hash value position.

Add the key-value pair to the list at the hash value position.

The method should not return anything.

*** Solution Explanation ***
 def set_item(self, key, value):
        index = self.__hash(key)
        if self.data_map[index] == None:
            self.data_map[index] = []
        self.data_map[index].append([key, value])
The set_item method takes a key and a value and adds them to the hash table. It computes the index in the hash table for the key using the __hash method, which is a private method that computes a hash code for the key.

The method then checks whether the bucket at the index is empty. If it is, it initializes the bucket to an empty list. This is necessary because we want to store a list of [key, value] pairs at each bucket in the hash table, and if the bucket is initially None, we can't append to it.

Finally, the method appends the [key, value] pair to the bucket at the index, so that the key-value mapping is stored in the hash table.



Code with inline comments:



def set_item(self, key, value):
    # Compute the index in the hash table based on the key using the __hash method
    index = self.__hash(key)
    # If the bucket at the index is empty, initialize it to an empty list
    if self.data_map[index] == None:
        self.data_map[index] = []
    # Append the [key, value] pair to the bucket at the index
    self.data_map[index].append([key, value])


*** Code ***
class HashTable:
    def __init__(self, size = 7):
        self.data_map = [None] * size

    def print_table(self):
        for i, val in enumerate(self.data_map): 
            print(i, ": ", val)
      
    def __hash(self, key):
        my_hash = 0
        for letter in key:
            my_hash = (my_hash + ord(letter) * 23) % len(self.data_map)
        return my_hash  
    
    ## WRITE SET_ITEM METHOD HERE ##
    #                              #
    #                              #
    #                              #
    #                              #
    ################################




my_hash_table = HashTable()

my_hash_table.set_item('bolts', 1400)
my_hash_table.set_item('washers', 50)
my_hash_table.set_item('lumber', 70)

my_hash_table.print_table()



"""
    EXPECTED OUTPUT:
    ----------------
    0 :  None
    1 :  None
    2 :  None
    3 :  None
    4 :  [['bolts', 1400], ['washers', 50]]
    5 :  None
    6 :  [['lumber', 70]]

"""