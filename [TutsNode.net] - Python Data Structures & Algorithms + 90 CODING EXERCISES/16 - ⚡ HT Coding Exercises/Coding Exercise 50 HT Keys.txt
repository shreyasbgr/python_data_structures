Instructions:
HT: Keys
Write keys method.

This method should return a list of all the keys in the hash table.

*** Solution Explanation ***
def keys(self):
        all_keys = []
        for i in range(len(self.data_map)):
            if self.data_map[i] is not None:
                for j in range(len(self.data_map[i])):
                    all_keys.append(self.data_map[i][j][0])
        return all_keys
The keys() method works by iterating through the hash table's data map and checking if each index contains data. If there is data at an index, it means that the list at that index can contain key-value pairs. The method then iterates through the key-value pairs at that index and appends the key to a list of all the keys in the hash table.

Once all the keys have been appended to the list, it is returned. This is a list of all the keys present in the hash table.

The time complexity of the keys() method is O(n), where n is the number of elements in the hash table. This is because we need to iterate through all elements in the hash table to retrieve all the keys.



Code with inline comments:



def keys(self):
    # list to store all the keys
    all_keys = []
    
    # iterate through each slot in the data map
    for i in range(len(self.data_map)):
        # if the slot is not empty, iterate through the items in the slot
        if self.data_map[i] is not None:
            for j in range(len(self.data_map[i])):
                # append the key to the list of keys
                all_keys.append(self.data_map[i][j][0])
    
    # return the list of keys
    return all_keys

*** Code ***
class HashTable:
    def __init__(self, size = 7):
        self.data_map = [None] * size
      
    def __hash(self, key):
        my_hash = 0
        for letter in key:
            my_hash = (my_hash + ord(letter) * 23) % len(self.data_map)
        return my_hash  

    def print_table(self):
        for i, val in enumerate(self.data_map): 
            print(i, ": ", val)
    
    def set_item(self, key, value):
        index = self.__hash(key)
        if self.data_map[index] == None:
            self.data_map[index] = []
        self.data_map[index].append([key, value])
    
    def get_item(self, key):
        index = self.__hash(key)
        if self.data_map[index] is not None:
            for i in range(len(self.data_map[index])):
                if self.data_map[index][i][0] == key:
                    return self.data_map[index][i][1]
        return None

    ## WRITE KEYS METHOD HERE ##
    #                          #
    #                          #
    #                          #
    #                          #
    ############################




my_hash_table = HashTable()

my_hash_table.set_item('bolts', 1400)
my_hash_table.set_item('washers', 50)
my_hash_table.set_item('lumber', 70)

print(my_hash_table.keys())



"""
    EXPECTED OUTPUT:
    ----------------
    ['bolts', 'washers', 'lumber']

"""