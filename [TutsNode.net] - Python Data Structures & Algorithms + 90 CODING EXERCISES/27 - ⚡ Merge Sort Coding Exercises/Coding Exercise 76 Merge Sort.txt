Instructions: 
Merge Sort
Write the merge_sort function

*** Solution Explanation ***
def merge_sort(my_list):
    if len(my_list) == 1:
        return my_list
    mid_index = int(len(my_list)/2)
    left = merge_sort(my_list[:mid_index])
    right = merge_sort(my_list[mid_index:])
    
    return merge(left, right)


Merge Sort is a divide-and-conquer algorithm for sorting a list of numbers. Here is how the code works:

The function takes in a list of numbers my_list as input.

If the length of my_list is 1, the list is already sorted, so the function returns my_list without further processing.

If the length of my_list is greater than 1, the function recursively applies the Merge Sort algorithm to the left and right halves of my_list.

The function finds the middle index of my_list and splits it into two halves, left and right, by slicing the list with my_list[:mid_index] and my_list[mid_index:], respectively.

The function recursively calls itself with left and right as inputs, applying the Merge Sort algorithm to each half.

Finally, the function uses the merge function to merge the sorted left and right halves into a single sorted list, which is then returned.

Overall, the Merge Sort algorithm works by dividing the input list into smaller and smaller sub-lists and then merging them back together to get the final sorted list.

This approach results in a time complexity of O(n log n), which makes Merge Sort one of the fastest sorting algorithms available.





Code with inline comments:



def merge_sort(my_list):
    # if the list contains only one element, it is already sorted
    if len(my_list) == 1:
        return my_list
    
    # find the midpoint index of the list
    mid_index = int(len(my_list) / 2)
    
    # recursively sort the left and right halves of the list
    left = merge_sort(my_list[:mid_index])
    right = merge_sort(my_list[mid_index:])
    
    # merge the sorted left and right halves of the list
    return merge(left, right)


*** OUTPUT ***
def merge(array1, array2):
    combined = []
    i = 0
    j = 0
    while i < len(array1) and j < len(array2):
        if array1[i] < array2[j]:
            combined.append(array1[i])
            i += 1
        else:
            combined.append(array2[j])
            j += 1
              
    while i < len(array1):
        combined.append(array1[i])
        i += 1

    while j < len(array2):
        combined.append(array2[j])
        j += 1

    return combined


## WRITE MERGE_SORT FUNCTION HERE ##
#                                  #
#                                  #
#                                  #
#                                  #
####################################




original_list = [3,1,4,2]

sorted_list = merge_sort(original_list)

print('Original List:', original_list)

print('\nSorted List:', sorted_list)



"""
    EXPECTED OUTPUT:
    ----------------
    Original List: [3, 1, 4, 2]
    
    Sorted List: [1, 2, 3, 4]
    
 """