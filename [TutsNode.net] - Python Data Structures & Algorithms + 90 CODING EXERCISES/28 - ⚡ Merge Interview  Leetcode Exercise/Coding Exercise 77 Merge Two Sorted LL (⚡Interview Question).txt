Instructions: 
Merge Two Sorted LL (âš¡Interview Question)
Description

The merge method takes in another LinkedList as an input and merges it with the current LinkedList. The elements in both lists are assumed to be in ascending order, but the input lists themselves do not need to be sorted.

Parameters

other_list (LinkedList): the other LinkedList to merge with the current list



Return Value

This method does not return a value, but it modifies the current LinkedList to contain the merged list.



Example:

l1 = LinkedList(1)
l1.append(3)
l1.append(5)
l1.append(7)
 
l2 = LinkedList(2)
l2.append(4)
l2.append(6)
l2.append(8)
 
l1.merge(l2)
 
# The current list (l1) now contains the merged list [1, 2, 3, 4, 5, 6, 7, 8]


Details

The merge method works as follows:

It gets the head node of the other linked list (other_list.head) and sets it to a local variable called other_head.

It creates a new node called dummy with a value of 0, which will serve as the head of the merged linked list.

It creates a new node called current and sets it equal to `

*** Solution Explanation ***
def merge(self, other_list):
        other_head = other_list.head
        dummy = Node(0)
        current = dummy
 
        while self.head is not None and other_head is not None:
            if self.head.value < other_head.value:
                current.next = self.head
                self.head = self.head.next
            else:
                current.next = other_head
                other_head = other_head.next
            current = current.next
 
        if self.head is not None:
            current.next = self.head
        else:
            current.next = other_head
            self.tail = other_list.tail
 
        self.head = dummy.next
        self.length += other_list.length




This code defines a method called merge that can be used on a LinkedList object to merge it with another LinkedList object (other_list). The method follows the merge sort algorithm to combine the two lists.

Here's how it works:

The method starts by getting the head node of the other_list and creating a dummy node to hold the merged list.

A current node is created to keep track of the position in the merged list.

A while loop is used to compare the values of the first nodes in both lists. The smaller value is added to the current node, and the respective head node is moved to the next position.

Steps 3 is repeated until one of the lists is empty.

If the first list still has nodes left, they are added to the current node.

If the second list still has nodes left, they are added to the current node.

The head of the merged list is set to the next node after the dummy node, and the length of the list is updated.



Note that this method assumes that both LinkedList objects are already sorted in ascending order. If not, the merge method could produce an incorrectly sorted merged list.





Code with inline comments:



# Method to merge a linked list with another linked list
def merge(self, other_list):
    
    # Get the head node of the other linked list
    other_head = other_list.head
    
    # Create a dummy node to hold the merged list
    dummy = Node(0)
    
    # Set the current node to the dummy node
    current = dummy
 
    # Loop while both lists still have nodes
    while self.head is not None and other_head is not None:
        
        # Compare the values of the first nodes in each list
        if self.head.value < other_head.value:
            # If the value in the first list is smaller,
            # add it to the current node and move to the next node in the first list
            current.next = self.head
            self.head = self.head.next
        else:
            # Otherwise, add the value from the second list
            # and move to the next node in the second list
            current.next = other_head
            other_head = other_head.next
            
        # Move the current node to the next position
        current = current.next
 
    # If the first list still has nodes left, add them to the current node
    if self.head is not None:
        current.next = self.head
    else:
        # If the second list still has nodes left, add them to the current node
        current.next = other_head
        # Update the tail of the merged list to be the tail of the second list
        self.tail = other_list.tail
 
    # Set the head of the merged list to the next node after the dummy node
    self.head = dummy.next
    
    # Update the length of the merged list
    self.length += other_list.length

*** OUTPUT ***
class Node:
    def __init__(self, value):
        self.value = value
        self.next = None
        

class LinkedList:
    def __init__(self, value):
        new_node = Node(value)
        self.head = new_node
        self.tail = new_node
        self.length = 1

    def print_list(self):
        temp = self.head
        while temp is not None:
            print(temp.value)
            temp = temp.next
        
    def append(self, value):
        new_node = Node(value)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            self.tail = new_node
        self.length += 1

    # WRITE MERGE METHOD HERE #
    #                         #
    #                         #
    #                         #
    #                         #
    ###########################
    


l1 = LinkedList(1)
l1.append(3)
l1.append(5)
l1.append(7)


l2 = LinkedList(2)
l2.append(4)
l2.append(6)
l2.append(8)

l1.merge(l2)

l1.print_list()


"""
    EXPECTED OUTPUT:
    ----------------
    1 
    2 
    3 
    4 
    5 
    6 
    7
    8

"""