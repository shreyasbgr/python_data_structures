Instructions: 
Pivot
Write the pivot function

*** Solution Explanation ***
def pivot(my_list, pivot_index, end_index):
    swap_index = pivot_index
 
    for i in range(pivot_index+1, end_index+1):
        if my_list[i] < my_list[pivot_index]:
            swap_index += 1
            swap(my_list, swap_index, i)
    swap(my_list, pivot_index, swap_index)
    return swap_index 


pivot takes in three arguments:

a list my_list

a pivot index pivot_index

and an end index end_index



The purpose of this function is to rearrange the elements in my_list such that all elements less than the pivot element are to the left of it, and all elements greater than the pivot element are to the right of it.

The function first sets swap_index to the value of pivot_index. It then iterates through the list starting from pivot_index+1 up to and including end_index, checking if the current element is less than the pivot element (which is located at pivot_index).

If it is, the function swaps the current element with the element at swap_index, and then increments swap_index.

After the loop has finished, the function swaps the pivot element with the element at swap_index, effectively placing the pivot element in its sorted position. The function then returns the index of the pivot element after swapping.

This function is used in the quicksort algorithm to recursively sort a list by choosing a pivot element, partitioning the list into two sub-lists based on the pivot, and then recursively applying quicksort to each sub-list.





Code with inline comments:



def pivot(my_list, pivot_index, end_index):
    # initialize the swap index to the pivot index
    swap_index = pivot_index
 
    # iterate over the list from the pivot index + 1 to the end index
    for i in range(pivot_index+1, end_index+1):
        # if the current element is less than the pivot element
        if my_list[i] < my_list[pivot_index]:
            # increment the swap index
            swap_index += 1
            # swap the current element with the element at the swap index
            swap(my_list, swap_index, i)
    
    # swap the pivot element with the element at the swap index
    swap(my_list, pivot_index, swap_index)
    # return the index of the pivot element after swapping
    return swap_index


*** OUTPUT ***
def swap(my_list, index1, index2):
    temp = my_list[index1]
    my_list[index1] = my_list[index2]
    my_list[index2] = temp


## WRITE PIVOT FUNCTION HERE ##
#                             #
#                             #
#                             #
#                             #
############################### 




my_list = [4,6,1,7,3,2,5]

print('List before running pivot():')
print(my_list)

returned_pivot_index = pivot(my_list, 0, 6)

print('\nList after running pivot():')
print(my_list)

print('\nReturned Swap Index:')
print(returned_pivot_index)



"""
    EXPECTED OUTPUT:
    ----------------
    List before running pivot():
    [4, 6, 1, 7, 3, 2, 5]

    List after running pivot():
    [2, 1, 3, 4, 6, 7, 5]

    Returned Swap Index:
    3

 """